{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","roll","getR","result","setRes","state","setState","className","Paper","style","padding","textAlign","backgroundColor","color","fontFamily","elevation","width","margin","TextField","id","label","variant","marginTop","marginLeft","marginRight","onChange","e","target","value","Button","onClick","a","fetch","method","headers","body","JSON","stringify","then","response","json","data","TableContainer","component","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","Object","keys","length","map","type","height","timeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TA0HeA,MA1Gf,WAAgB,IAAD,EACQC,mBAAS,IADjB,mBACNC,EADM,KACAC,EADA,OAEYF,mBAAS,IAFrB,mBAENG,EAFM,KAEEC,EAFF,OAGYJ,oBAAS,GAHrB,mBAGNK,EAHM,KAGAC,EAHA,KAKb,OACE,sBAAKC,UAAU,MAAf,UACE,iCACE,cAACC,EAAA,EAAD,CACEC,MAAO,CACLC,QAAS,OACTC,UAAW,SACXC,gBAAiB,SAJrB,SAOE,oBAAIH,MAAO,CAAEI,MAAO,QAASC,WAAY,aAAzC,sCAKJ,iCACE,cAACN,EAAA,EAAD,CACEO,UAAW,EACXN,MAAO,CAAEC,QAAS,OAAQM,MAAO,MAAOC,OAAQ,QAFlD,SAIE,mCACE,cAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,qBACNC,QAAQ,WACRZ,MAAO,CACLO,MAAO,MACPM,UAAW,OACXC,WAAY,OACZC,YAAa,QAGfC,SAAU,SAACC,GACTxB,EAAKwB,EAAEC,OAAOC,UAGlB,uBACA,cAACC,EAAA,EAAD,CAAQR,QAAQ,YACdZ,MAAO,CAACa,UAAU,QAClBQ,QAAO,sBAAE,sBAAAC,EAAA,sDACPzB,GAAS,GACT0B,MAAM,aAAc,CAClBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEpC,WACtBqC,KANH,uCAMQ,WAAOC,GAAP,eAAAR,EAAA,sEACWQ,EAASC,OADpB,OACFC,EADE,OAINrC,EAAOqC,GACPnC,GAAS,GALH,2CANR,uDAFO,2CAFX,yBAyBN,mCAEID,EACJ,cAACqC,EAAA,EAAD,CAAgBC,UAAWnC,IAAOC,MAAO,CAACO,MAAM,OAAhD,SACA,eAAC4B,EAAA,EAAD,CAAQC,aAAW,eAAnB,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAUtC,MAAO,CAACG,gBAAgB,SAAlC,UACE,cAACoC,EAAA,EAAD,CAAWC,MAAM,OAAOxC,MAAO,CAACI,MAAM,SAAtC,yBACA,cAACmC,EAAA,EAAD,CAAWC,MAAM,OAAOxC,MAAO,CAACI,MAAM,SAAtC,yBAGJ,cAACqC,EAAA,EAAD,UACgC,IAA/BC,OAAOC,KAAKjD,GAAQkD,OACnBF,OAAOC,KAAKjD,GAAQmD,KAAI,SAAC5B,GACvB,OACE,eAACqB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAYtB,IACZ,cAACsB,EAAA,EAAD,UAAY7C,EAAOuB,WAIzB,YAKN,cAAC,IAAD,CACA6B,KAAK,OACL1C,MAAM,UACN2C,OAAQ,IACRxC,MAAO,IACPyC,QAAS,MA/BP,YCvESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.68f7af6a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { requirePropFactory } from \"@material-ui/core\";\n\nfunction App() {\n  const [roll, getR] = useState(\"\");\n  const [result, setRes] = useState([]);\n  const [state,setState] = useState(true)\n\n  return (\n    <div className=\"App\">\n      <header>\n        <Paper\n          style={{\n            padding: \"40px\",\n            textAlign: \"center\",\n            backgroundColor: \"black\",\n          }}\n        >\n          <h1 style={{ color: \"white\", fontFamily: \"monospace\" }}>\n            Proedge\n          </h1>\n        </Paper>\n      </header>\n      <center>\n        <Paper\n          elevation={3}\n          style={{ padding: \"50px\", width: \"60%\", margin: \"40px\" }}\n        >\n          <center>\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Enter Roll numbers\"\n              variant=\"outlined\"\n              style={{\n                width: \"60%\",\n                marginTop: \"30px\",\n                marginLeft: \"auto\",\n                marginRight: \"auto\",\n                \n              }}\n              onChange={(e) => {\n                getR(e.target.value);\n              }}\n            />\n            <br />\n            <Button variant=\"contained\"\n              style={{marginTop:\"20px\"}}\n              onClick={async () => {\n                setState(false)\n                fetch(\"/getresult\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  body: JSON.stringify({ roll }),\n                }).then(async (response) => {\n                  let data = await response.json();\n                  // console.log(\"----herr\", data);\n\n                  setRes(data);\n                  setState(true)\n                  // console.log(\"result\", result);\n                });\n              }}\n            >\n              send\n            </Button>\n          </center>\n        </Paper>\n      </center>\n      <center>\n        {\n          state?\n      <TableContainer component={Paper} style={{width:\"90%\"}}>\n      <Table  aria-label=\"simple table\">\n        <TableHead>\n          <TableRow style={{backgroundColor:\"black\"}} >\n            <TableCell align=\"left\" style={{color:\"white\"}}>Roll Number</TableCell>\n            <TableCell align=\"left\" style={{color:\"white\"}}>Result</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n        {Object.keys(result).length !== 0\n        ? Object.keys(result).map((e) => {\n            return (\n              <TableRow>\n                <TableCell>{e}</TableCell> \n                <TableCell>{result[e]}</TableCell>\n              </TableRow>\n            );\n          })\n        : null}\n          \n        </TableBody>\n      </Table>\n    </TableContainer>:\n    <Loader\n    type=\"Puff\"\n    color=\"#00BFFF\"\n    height={100}\n    width={100}\n    timeout={3000} //3 secs\n  />\n  }  </center>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}